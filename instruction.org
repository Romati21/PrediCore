Использованию отдельных баз данных для
development и production окружений – это отличная практика. Для правильного
управления коммитами и миграциями в обеих ветках, чтобы избежать проблем с
версиями Alembic в будущем, рекомендуется придерживаться следующей стратегии:

1. Структура веток:
   - =master= (или =main= ) для production
   - =development= для разработки
   - Отдельные feature-ветки для новых функций

2. Процесс работы с миграциями:

   2.1 В ветке =development= :

   - Создавайте новые миграции с помощью =alembic revision --autogenerate -m
     "описание изменений"=
   - Применяйте миграции к development базе данных: =alembic upgrade head=
   - Коммитьте файлы миграций вместе с изменениями в коде

   2.2 Тестирование в development среде:

   - Убедитесь, что все работает корректно с новыми миграциями

   2.3 Слияние в =master= :

   - Создайте pull request из =development= в =master=
   - Проведите код-ревью, включая просмотр файлов миграций
   - После одобрения, выполните слияние

   2.4 Обновление production:

   - После слияния в =master= , примените миграции к production базе данных
   - Обновите код приложения в production среде

3. Правила создания миграций:
   - Всегда создавайте миграции из последней версии =master=
   - Не изменяйте уже примененные миграции, создавайте новые для исправлений
   - Используйте понятные и описательные имена для миграций

4. Синхронизация веток:
   - Регулярно подтягивайте изменения из =master= в =development=
   - Разрешайте конфликты сразу, не допуская больших расхождений между ветками

5. Версионирование:
   - Используйте семантическое версионирование для релизов
   - Помечайте каждый релиз тегом в Git

6. Документация:
   - Ведите журнал изменений (CHANGELOG.md)
   - Документируйте все значимые изменения в схеме базы данных

7. Автоматизация:
   - Настройте CI/CD для автоматического применения миграций при деплое
   - Включите проверку миграций в процесс тестирования

8. Резервное копирование:
   - Создавайте резервные копии production базы перед применением миграций
   - Храните историю резервных копий

9. Откат изменений:
   - Всегда имейте план отката для каждой миграции
   - Тестируйте процесс отката в development среде

10. Мониторинг:
    - Следите за производительностью базы данных после применения миграций
    - Будьте готовы быстро реагировать на проблемы в production

Пример рабочего процесса:

1. Создание новой функциональности:


- #+begin_src c git checkout -b feature/new-feature master
  # Разработка новой функциональности
  alembic revision --autogenerate -m "Add new feature tables" alembic upgrade
  head git add . git commit -m "Implement new feature with database changes" git
  push origin feature/new-feature #+end_src

- Слияние в development:

- #+begin_src c git checkout development git merge feature/new-feature git push
  origin development #+end_src

- Тестирование в development среде
- Слияние в master и обновление production:


1. #+begin_src c git checkout master git merge development git push origin
   master
  # Применение миграций на production
  alembic upgrade head #+end_src


Придерживаясь этой стратегии, можно минимизировать риски несоответствия
версий Alembic между development и production окружениями. Ключевыми моментами
являются регулярная синхронизация, тщательное тестирование и четкое следование
процессу создания и применения миграций.
